{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open SymbolNS
open LexHelper

}

// Regular expressions
let num = ['0'-'9']+
let alpha = ['a'-'z' 'A'-'Z']
let ident = alpha+ (alpha | num | '-')*
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let utf8 = "\\"['0'-'9' ]['0'-'9']['0'-'9']

rule tokenstream = parse
// --------------------------
| ident 		{ ident lexbuf }
| ","           { Parser.COMMA }
| ":"           { Parser.COLON }
| ";"           { Parser.SEMI }
| "("           { Parser.LPAREN }
| ")"           { Parser.RPAREN }
| "{"           { Parser.LBRACE }
| "}"           { Parser.RBRACE }
| "["           { Parser.LBRACK }
| "]"           { Parser.RBRACK }
| "."           { Parser.DOT }
| "+"           { Parser.PLUS }
| "-"           { Parser.MINUS }
| "*"           { Parser.MUL }
| "/"           { Parser.DIV }
| "="           { Parser.EQ }
| "<>"          { Parser.NEQ }
| ">"           { Parser.GT }
| "<"           { Parser.LT }
| ">="          { Parser.GE }
| "<="          { Parser.LE }
| "&"           { Parser.AND }
| "|"           { Parser.OR }
| ":="          { Parser.ASSIGN }
| "\""          { Parser.STRING  (string List.empty lexbuf)  }
| "/*"          { comment lexbuf; tokenstream lexbuf }
// --------------------------
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }

and string strList = parse 
| "\\\""    { createString strList }
| "\\n"     { string ("\n"::strList) lexbuf  }
| "\\t"     { string ("\t"::strList) lexbuf  }
| "\\a"     { string ("\a"::strList) lexbuf  }
| "\\b"     { string ("\b"::strList) lexbuf  }
| "\\f"     { string ("\f"::strList) lexbuf  }
| "\\r"     { string ("\r"::strList) lexbuf  }
| "\\v"     { string ("\v"::strList) lexbuf  }
| "\\\\"    { string ("\\"::strList) lexbuf  }
| _         { string ((lexeme lexbuf)::strList) lexbuf}
| newline   { failwithf "ParseError: Unterminated string at line %d" lexbuf.EndPos.Line }
| eof       { failwith "ParseError: Unterminated string at eof" }

and comment = parse
| "*/"    { () }
| "/*"    { comment lexbuf; comment lexbuf; }
| newline { newline lexbuf; comment lexbuf }
| _       { comment lexbuf }